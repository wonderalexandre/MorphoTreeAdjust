
#ifndef TESTS_HPP
#define TESTS_HPP  

#include <iostream>
#include <unordered_set>

#include "../morphoTreeAdjust/include/NodeCT.hpp"
#include "../morphoTreeAdjust/include/ComponentTree.hpp"

#include <iomanip>
#include <fstream>
#include <iostream>

inline void printFlatzoneGraph(FlatzoneGraph flatzoneGraph, int size) {
    std::cout << "Grafo de FlatZones:\n";

    for (int i = 0; i < size; ++i) {
        std::cout << "FlatZone " << i << " ‚Üí { ";   
        for (int neighbor : *flatzoneGraph[i]) {
            std::cout << neighbor << " ";
        }
        std::cout << "}\n";
    }
}

template <typename CNPsType>
inline void printTree(NodeCT<CNPsType>* root, int indent = 0) {
    
    // Imprime o n√≥ atual com indenta√ß√£o
    for (int i = 0; i < indent; ++i) {
        std::cout << "|-";
    }
    std::cout << "Node: " << root->getIndex() <<  ", Level: " << root->getLevel()<< std::endl;

    // Chama recursivamente a fun√ß√£o para cada filho
    for (NodeCT<CNPsType>* child : root->getChildren()) {
        printTree(child, indent + 1);
    }
}

template <typename CNPsType>
inline void printMappingSC(ComponentTree<CNPsType>* tree, std::string nomeArquivo = "") {

    int numRows = tree->getNumRowsOfImage();
    int numCols = tree->getNumColsOfImage();
    int n = numRows*numCols;
    int map[n];
    for (int p=0; p < n; p++){
        map[p] = tree->getSC(p)->getIndex();
    }

    std::ostream* streamSaida;
    std::ofstream arquivoSaida;
    if (nomeArquivo.empty()) {
        streamSaida = &std::cout;
    } else {
        arquivoSaida.open(nomeArquivo);
        if (!arquivoSaida.is_open()) {
            std::cerr << "Erro ao abrir o arquivo para escrita." << std::endl;
            return;
        }
        streamSaida = &arquivoSaida;
    }
    if(tree->isMaxtree()){
        *streamSaida << "---- max-tree ----" << "\n";
    }else{
        *streamSaida << "---- min-tree ----" << "\n";
    }
    // Impress√£o bidimensional
   for (int i = 0; i < tree->getNumRowsOfImage(); ++i) {
        for (int j = 0; j < tree->getNumColsOfImage(); ++j) {
            *streamSaida << std::setw(2) <<  map[i * tree->getNumColsOfImage() + j] << " ";
        }
        *streamSaida << "\n";
    }
    if (streamSaida != &std::cout){
        dynamic_cast<std::ofstream*>(streamSaida)->close(); // std::cout n√£o precisa ser fechado explicitamente
    }

}

template <typename CNPsType>
inline  void printConnectedComponent(NodeCT<CNPsType>* node, ComponentTree<CNPsType>* tree, std::string nomeArquivo = "") {
    int numRows = tree->getNumRowsOfImage();
    int numCols = tree->getNumColsOfImage();
    int n = numRows*numCols;
    std::ostream* streamSaida;
    std::ofstream arquivoSaida;

    if (nomeArquivo.empty()) {
        streamSaida = &std::cout;
    } else {
        arquivoSaida.open(nomeArquivo); 
        if (!arquivoSaida.is_open()) {
            std::cerr << "Erro ao abrir o arquivo para escrita." << std::endl;
            return;
        }
        streamSaida = &arquivoSaida;
    }
    if(tree->isMaxtree()){
        *streamSaida << "---- max-tree ----" << "\n";
    }else{
        *streamSaida << "---- min-tree ----" << "\n";
    }
    // Impress√£o bidimensional
   for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            if(tree->getSC(i * numCols + j) == node){
                *streamSaida <<  1 << " ";
            }else{
                *streamSaida <<  0 << " ";
            }
        }
        *streamSaida << "\n";
    }
    if (streamSaida != &std::cout){
        dynamic_cast<std::ofstream*>(streamSaida)->close(); // std::cout n√£o precisa ser fechado explicitamente
    }

}

inline  void printImage(int* img, int numRows, int numCols, std::string nomeArquivo = "") {
    int n = numRows*numCols;
    std::ostream* streamSaida;
    std::ofstream arquivoSaida;
    if (nomeArquivo.empty()) {
        streamSaida = &std::cout;
    } else {
        arquivoSaida.open(nomeArquivo);
        if (!arquivoSaida.is_open()) {
            std::cerr << "Erro ao abrir o arquivo para escrita." << std::endl;
            return;
        }
        streamSaida = &arquivoSaida;
    }

    // Impress√£o bidimensional
   for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            *streamSaida << std::setw(2) <<  img[i * numCols + j] << " ";
        }
        *streamSaida << "\n";
    }
    if (streamSaida != &std::cout){
        dynamic_cast<std::ofstream*>(streamSaida)->close(); // std::cout n√£o precisa ser fechado explicitamente
    }

}


inline  void printMappingFZ(ComponentTreeFZ* tree, std::string nomeArquivo = "") {
    int numRows = tree->getNumRowsOfImage();
    int numCols = tree->getNumColsOfImage();
    int n = numRows*numCols;
    int map[n];
    for (int p=0; p < n; p++){
        map[p] = tree->getFlatzoneRef(p).size() > 99 ? 99 : tree->getFlatzoneRef(p).size();
    }

    std::ostream* streamSaida;
    std::ofstream arquivoSaida;
    if (nomeArquivo.empty()) {
        streamSaida = &std::cout;
    } else {
        arquivoSaida.open(nomeArquivo);
        if (!arquivoSaida.is_open()) {
            std::cerr << "Erro ao abrir o arquivo para escrita." << std::endl;
            return;
        }
        streamSaida = &arquivoSaida;
    }
    if(tree->isMaxtree()){
        *streamSaida << "---- max-tree ----" << "\n";
    }else{
        *streamSaida << "---- min-tree ----" << "\n";
    }
    // Impress√£o bidimensional
   for (int i = 0; i < tree->getNumRowsOfImage(); ++i) {
        for (int j = 0; j < tree->getNumColsOfImage(); ++j) {
            *streamSaida << std::setw(2) <<  map[i * tree->getNumColsOfImage() + j] << " ";
        }
        *streamSaida << "\n";
    }
    if (streamSaida != &std::cout){
        dynamic_cast<std::ofstream*>(streamSaida)->close(); // std::cout n√£o precisa ser fechado explicitamente
    }

}

inline bool isEquals(int* imgOut1, int* imgOut2, int size){
    int equals = 0;
    for(int p=0; p < size; p++){
        if(imgOut1[p] != imgOut2[p]){
            equals++;
            
        }
    }
    //std::cout << "\tDiff:" << equals <<"\t";
    return equals == 0;
 }



 template <typename CNPsType>
 inline  void testComponentTree(ComponentTree<CNPsType>* tree, const std::string& treeType, int* img, int numRows, int numCols) {
    std::cout << "üîç Testando " << treeType << "..." << std::endl;

    if (!tree) {
        std::cerr << "‚ùå Erro: " << treeType << " n√£o foi criada corretamente!" << std::endl;
        return;
    }

    int area = tree->getRoot()->getArea();
    int count_area = 0;
    for(int p : tree->getRoot()->getPixelsOfCC()){
        count_area++;
    }
    if (area == count_area) {
        std::cout << "‚úÖ Iterator getPixelsOfCC da " << treeType << " est√° correto." << std::endl;
    }else{
        std::cout << "‚ùå Erro: Iterator getPixelsOfCC da " << treeType << ". Valor de count_area:" << count_area << std::endl;
    }
    int num_cnps = tree->getRoot()->getNumCNPs();
    int count_cnps= 0;
    for(int p : tree->getRoot()->getCNPs()){
        count_cnps++;
    }
    if (num_cnps == count_cnps) {
        std::cout << "‚úÖ Iterator getCNPs da" << treeType << " est√° correto." << std::endl;
    }else{
        std::cout << "‚ùå Erro: Iterator getCNPs da" << treeType << ". Valor de count_cnps:" << count_cnps << std::endl;
        return;
    } 


    // Teste 1: Raiz da √°rvore n√£o nula
    NodeCT<CNPsType>* root = tree->getRoot();
    if (!root) {
        std::cerr << "‚ùå Erro: Raiz da " << treeType << " √© nula!" << std::endl;
        return;
    }
    std::cout << "‚úÖ Raiz da " << treeType << " existe." << std::endl;

    
    // Teste 2: N√∫mero de n√≥s na √°rvore
    int numNodes = tree->getNumNodes();
    if (numNodes <= 0) {
        std::cerr << "‚ùå Erro: " << treeType << " tem n√∫mero inv√°lido de n√≥s!" << std::endl;
        return;
    }
    std::cout << "‚úÖ " << treeType << " tem " << numNodes << " n√≥s." << std::endl;

    // Teste 3: Verificando se todos os n√≥s possuem um pai correto (exceto a raiz)
    bool allParentsCorrect = true;
    for (NodeCT<CNPsType>* node : tree->getRoot()->getIteratorBreadthFirstTraversal()) {
        if (node != root && node->getParent() == nullptr) {
            std::cerr << "‚ùå Erro: N√≥ sem pai encontrado na " << treeType << "!" << std::endl;
            allParentsCorrect = false;
        }
    }
    if (allParentsCorrect) {
        std::cout << "‚úÖ Todos os n√≥s possuem pais corretos na " << treeType << "." << std::endl;
    }

    // Teste 4: Verificando se cada n√≥ tem filhos corretos
    bool allChildrenCorrect = true;
    for (NodeCT<CNPsType>* node : tree->getRoot()->getIteratorBreadthFirstTraversal()) {
        for (NodeCT<CNPsType>* child : node->getChildren()) {
            if (child->getParent() != node) {
                std::cerr << "‚ùå Erro: N√≥ com filho sem refer√™ncia ao pai na " << treeType << "!" << std::endl;
                allChildrenCorrect = false;
            }
        }
    }
    if (allChildrenCorrect) {
        std::cout << "‚úÖ Todos os n√≥s possuem filhos corretamente associados na " << treeType << "." << std::endl;
    }

    // Teste 5: Verificando se os pixels est√£o corretamente armazenados nos n√≥s
    bool allPixelsCorrect = true;
    for (NodeCT<CNPsType>* node : tree->getRoot()->getIteratorBreadthFirstTraversal()) {
        for (int p : node->getCNPs()) {
            if (tree->getSC(p) != node) {
                std::cerr << "‚ùå Erro: Pixel " << p << " n√£o est√° corretamente associado ao n√≥ na " << treeType << "!" << std::endl;
                allPixelsCorrect = false;
            }
        }
    }
    if (allPixelsCorrect) {
        std::cout << "‚úÖ Todos os pixels est√£o corretamente mapeados para os n√≥s na " << treeType << "." << std::endl;
    }


    // Teste 7: Verificando se todos os pixels da imagem est√£o mapeados corretamente na ComponentTree
    bool allMappedCorrectly = true;
    int numPixels = numRows * numCols;
    for (int p = 0; p < numPixels; p++) {
        NodeCT<CNPsType>* mappedNode = tree->getSC(p);
        if (!mappedNode) {
            std::cerr << "‚ùå Erro: Pixel " << p << " n√£o foi mapeado para nenhum n√≥ na " << treeType << "!" << std::endl;
            allMappedCorrectly = false;
        } else if (mappedNode->getLevel() != img[p]) {
            std::cerr << "‚ùå Erro: Pixel " << p << " est√° associado a um n√≥ de n√≠vel " << mappedNode->getLevel()
                      << " mas deveria estar em " << img[p] << " na " << treeType << "!" << std::endl;
            allMappedCorrectly = false;
        }
    }
    if (allMappedCorrectly) {
        std::cout << "‚úÖ Todos os pixels da imagem foram corretamente mapeados na " << treeType << "." << std::endl;
    }
}

inline void testComponentTreeFZ(ComponentTreeFZ* tree, const std::string& treeType, int* img, int numRows, int numCols) {
    testComponentTree(tree, treeType, img, numRows, numCols);

    // Teste 6: Verificando se as flatzones est√£o corretamente definidas
    bool allFlatzonesCorrect = true;
    for (NodeFZ* node : tree->getRoot()->getIteratorBreadthFirstTraversal()) {
        if(node->getNumCNPs() == 0){
            std::cerr << "‚ùå Erro: O n√≥ de id " << node->getIndex() << " n√£o possui flatzones vazias na " << treeType << "!" << std::endl;
            allFlatzonesCorrect = false;
        }
        for (std::list<int> flatzone : node->getCNPsByFlatZone()) {
            if(flatzone.empty()){
                std::cerr << "‚ùå Erro: O n√≥ de id " << node->getIndex() << " n√£o possui flatzones vazias na " << treeType << "!" << std::endl;
                allFlatzonesCorrect = false;
            }
            for (int p : flatzone) {
                if (tree->getSC(p) != node) {
                    std::cerr << "‚ùå Erro: Pixel " << p << " de uma flatzone n√£o est√° no n√≥ correto na " << treeType << "!" << std::endl;
                    allFlatzonesCorrect = false;
                }
            }
        }
    }
    if (allFlatzonesCorrect) {
        std::cout << "‚úÖ Todas as flatzones est√£o corretamente definidas na " << treeType << "." << std::endl;
    }

    //Teste: Verifica se existem pixels mapeados em flatzones vazias
    int pixelMappingFZIncorreto = 0;
    for(int p=0; p < numRows*numCols; p++){
        if(tree->getFlatzoneRef(p).size() == 0)
            pixelMappingFZIncorreto++;
    }
    
    if (pixelMappingFZIncorreto == 0) {
        std::cout << "‚úÖ Todas as flatzones est√£o corretamente definidas na " << treeType << "." << std::endl;
    }else{
        std::cout << "‚ùå Erro: Total de pixels mapeados em flatzones vazias: " << pixelMappingFZIncorreto << std::endl;
    }



    // Verificar se todas as flatzones possuem pixels
    bool allFlatzonesValid = true;
    for (int p=0; p < numCols*numRows; p++){
        if(tree->getFlatzoneRef(p).size() == 0){
            allFlatzonesValid = false;
            std::cout << "‚ùå Falha - Nem as flatzones possuem pixels. Pixel que falhou: " << p <<  std::endl;
            break;
        }
    }
    
    if (allFlatzonesValid) {
        std::cout << "‚úÖ Todas as flatzones possuem pixels." << std::endl;
    }

    std::cout << "\n" << std::endl;
 }

template <typename CNPsType>
inline NodeCT<CNPsType>* getNodeByIndex(ComponentTree<CNPsType>* tree, int index){
	for (NodeCT<CNPsType>* node : tree->getRoot()->getIteratorBreadthFirstTraversal()) {
		if(node->getIndex() == index){
			return node;
		}
	}
	return nullptr;
}


inline int* getPassatImage(int& numRows, int& numCols){
    int* img=new int[6164]{
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,7,7,7,7,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,7,7,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,1,1,1,1,1,6,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,5,5,5,6,1,1,1,1,1,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,5,5,5,5,1,1,1,1,1,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,1,4,4,4,4,4,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,5,5,5,5,1,1,1,1,1,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,4,4,4,4,4,4,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,5,5,5,5,1,1,1,1,1,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,4,4,4,4,4,4,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,5,5,5,5,5,1,1,1,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,
        6,6,6,6,6,6,6,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,3,3,3,3,3,3,
        6,6,6,6,6,6,6,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,5,5,3,3,3,3,
        6,6,6,6,6,6,6,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,3,3,
        6,6,6,6,6,6,6,4,4,4,4,4,1,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,0,0,0,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,0,0,0,0,0,0,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,0,0,0,0,0,0,0,5,5,5,5,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,5,5,5,5,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,5,5,5,5,1,1,1,1,1,1,1,5,5,5,5,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,2,2,2,2,2,2,1,1,1,1,5,5,5,5,5,5,5,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,2,2,2,2,2,2,2,2,2,1,1,5,5,5,5,5,5,5,5,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,8,8,8,8,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,5,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,5,5,5,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
        6,6,6,6,6,6,6,1,1,1,1,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        6,6,6,6,6,6,6,1,1,1,1,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,
        6,6,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,8,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,
        6,6,6,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,7,7,7,2,2,2,2,2,2,2,8,8,8,8,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,1,1,1,1,1,1,1,7,7,7,7,7,3,3,3,3,8,8,8,8,8,8,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,7,7,7,7,7,7,7,7,3,3,3,3,3,3,8,8,8,8,8,8,8,3,3,3,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,1,1,1,1,4,4,4,4,4,4,4,4,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,6,6,6,3,3,3,3,3,3,3,6,8,8,8,8,8,8,8,8,8,8,8,0,0,0,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,6,6,6,6,3,3,3,3,3,3,3,6,8,8,8,8,8,8,8,8,2,2,2,2,2,2,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,6,6,6,1,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,6,6,6,6,6,6,3,3,3,3,3,6,6,6,6,8,8,8,8,8,8,2,2,2,2,2,2,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,3,3,3,3,3,3,7,7,0,0,0,0,0,0,0,0,0,7,7,7,7,6,6,6,6,6,6,6,6,3,3,6,6,6,6,6,6,0,8,8,8,8,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,6,6,6,6,6,6,1,1,1,1,1,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,6,3,3,3,4,4,4,4,4,3,3,3,3,3,7,7,7,7,0,0,0,0,0,0,0,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,8,8,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,6,6,6,6,6,6,1,1,1,1,1,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,3,7,7,7,7,0,0,0,0,0,0,0,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,6,6,6,6,6,6,1,1,1,1,1,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,3,7,7,7,7,0,0,0,0,0,0,0,7,7,7,7,3,3,3,3,3,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,6,6,6,6,6,6,1,1,1,1,1,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,0,7,7,7,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,6,6,6,6,6,6,1,1,1,1,1,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,6,6,6,6,6,6,1,1,1,1,4,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,6,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,5,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        6,6,6,6,6,6,6,6,3,3,3,3,3,4,4,4,4,4,4,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,5,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,4,4,4,4,3,3,3,3,7,7,7,7,7,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,5,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,
        1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4};
        
    
        numRows=67;
        numCols=92;
        return img;
}

inline int* getLenaCropImage(int& numRows, int& numCols){
    int* img = new int[5508]{
    184,	188,	186,	185,	191,	190,	192,	195,	195,	196,	194,	198,	201,	200,	200,	202,	202,	205,	205,	205,	205,	208,	211,	211,	213,	213,	215,	216,	219,	218,	217,	214,	205,	182,	109,	60,	50,	50,	60,	57,	60,	69,	68,	56,	57,	61,	78,	65,	50,	51,	69,	104,	159,	160,	143,	140,	131,	142,	144,	144,	140,	150,	147,	149,	147,	142,	148,	149,	144,	147,	144,	146,	141,	145,	143,	144,	147,	141,	145,	142,	139,
    181,	187,	185,	186,	187,	188,	189,	192,	193,	192,	198,	197,	198,	197,	200,	201,	201,	206,	205,	206,	201,	206,	210,	212,	211,	210,	215,	216,	219,	222,	217,	215,	213,	200,	153,	71,	49,	49,	53,	57,	66,	113,	67,	52,	57,	64,	75,	63,	50,	52,	67,	112,	163,	155,	143,	135,	133,	144,	137,	146,	151,	148,	153,	145,	146,	146,	146,	145,	146,	147,	146,	147,	142,	147,	144,	151,	145,	141,	147,	143,	140,
    185,	188,	193,	187,	185,	189,	188,	192,	193,	192,	198,	199,	199,	201,	200,	200,	203,	205,	204,	205,	204,	209,	211,	207,	211,	211,	212,	216,	217,	221,	219,	215,	215,	206,	188,	112,	51,	55,	51,	53,	59,	59,	66,	53,	57,	65,	71,	54,	52,	52,	67,	113,	160,	150,	150,	134,	129,	141,	143,	151,	150,	153,	147,	145,	145,	147,	149,	143,	146,	145,	145,	143,	144,	142,	139,	145,	148,	140,	142,	138,	143,
    182,	183,	186,	185,	184,	188,	192,	191,	189,	193,	197,	197,	198,	202,	204,	203,	205,	206,	204,	206,	205,	207,	210,	210,	213,	211,	213,	217,	215,	218,	218,	216,	215,	213,	205,	159,	76,	70,	49,	56,	56,	62,	60,	59,	53,	63,	60,	51,	46,	53,	70,	131,	160,	151,	153,	136,	131,	142,	142,	152,	152,	145,	148,	147,	149,	148,	147,	147,	145,	146,	145,	141,	142,	143,	141,	147,	145,	140,	143,	140,	143,
    180,	185,	186,	187,	188,	190,	189,	193,	196,	192,	194,	198,	197,	199,	200,	203,	206,	204,	205,	209,	206,	204,	209,	209,	211,	211,	214,	215,	215,	215,	218,	215,	216,	215,	211,	190,	109,	54,	54,	53,	58,	59,	58,	54,	54,	58,	56,	48,	45,	57,	78,	141,	154,	152,	160,	128,	139,	145,	139,	149,	147,	150,	150,	143,	148,	144,	147,	144,	147,	144,	146,	142,	141,	145,	143,	147,	147,	147,	143,	143,	142,
    181,	184,	182,	185,	184,	185,	187,	194,	191,	192,	194,	200,	196,	199,	202,	202,	202,	206,	207,	206,	206,	207,	211,	210,	211,	212,	214,	215,	216,	218,	216,	218,	217,	217,	213,	205,	159,	66,	47,	57,	50,	59,	61,	51,	50,	55,	54,	57,	53,	55,	82,	146,	147,	153,	168,	133,	140,	140,	143,	151,	148,	151,	148,	144,	149,	144,	146,	143,	143,	149,	145,	145,	144,	141,	144,	145,	143,	146,	141,	140,	145,
    180,	183,	185,	186,	184,	185,	187,	193,	192,	192,	193,	196,	200,	202,	202,	201,	204,	206,	207,	208,	205,	210,	210,	208,	211,	210,	212,	213,	215,	218,	218,	217,	218,	217,	216,	210,	188,	104,	52,	52,	53,	58,	61,	50,	51,	52,	57,	45,	44,	55,	86,	154,	145,	151,	158,	135,	132,	140,	150,	150,	147,	148,	149,	144,	147,	147,	146,	150,	145,	149,	142,	149,	144,	146,	146,	148,	147,	140,	145,	142,	140,
    179,	187,	185,	183,	186,	184,	190,	195,	193,	196,	195,	194,	200,	200,	202,	202,	206,	205,	205,	206,	206,	209,	210,	209,	212,	209,	212,	216,	216,	217,	216,	219,	218,	218,	220,	212,	205,	145,	67,	52,	53,	56,	51,	50,	48,	51,	54,	43,	44,	55,	99,	156,	148,	153,	155,	140,	130,	144,	148,	150,	150,	151,	146,	149,	148,	153,	150,	143,	145,	143,	151,	142,	145,	145,	148,	147,	142,	145,	146,	143,	143,
    184,	182,	183,	186,	182,	185,	188,	190,	190,	192,	196,	199,	200,	201,	204,	200,	206,	206,	208,	205,	206,	208,	212,	208,	210,	210,	212,	213,	214,	215,	216,	219,	219,	218,	220,	214,	209,	181,	91,	51,	48,	52,	53,	45,	45,	53,	50,	45,	45,	57,	104,	148,	147,	154,	152,	146,	131,	149,	148,	148,	151,	150,	147,	149,	148,	153,	146,	141,	147,	149,	142,	148,	148,	145,	141,	145,	144,	144,	144,	145,	147,
    183,	180,	182,	183,	186,	185,	185,	189,	191,	191,	196,	194,	199,	201,	201,	202,	204,	204,	205,	205,	206,	209,	211,	209,	210,	207,	212,	212,	213,	217,	218,	219,	218,	218,	219,	219,	212,	200,	141,	61,	43,	48,	52,	44,	48,	49,	52,	46,	49,	60,	114,	146,	145,	160,	148,	143,	136,	143,	146,	148,	147,	149,	149,	150,	149,	150,	146,	147,	144,	145,	145,	149,	146,	143,	150,	145,	144,	147,	141,	142,	146,
    185,	183,	183,	186,	183,	186,	186,	189,	190,	192,	196,	195,	200,	199,	202,	200,	203,	204,	206,	204,	203,	208,	208,	210,	210,	212,	211,	212,	211,	214,	217,	217,	218,	218,	218,	219,	213,	206,	174,	78,	42,	50,	50,	49,	44,	47,	52,	45,	50,	61,	124,	144,	143,	153,	146,	142,	144,	141,	151,	148,	143,	142,	149,	147,	146,	152,	154,	145,	148,	148,	145,	143,	143,	146,	144,	141,	142,	142,	144,	142,	142,
    183,	182,	192,	184,	186,	186,	189,	190,	191,	193,	194,	197,	198,	198,	200,	201,	202,	202,	206,	205,	207,	209,	209,	210,	210,	209,	211,	211,	212,	212,	215,	213,	218,	219,	219,	219,	214,	210,	197,	114,	50,	58,	60,	45,	46,	48,	52,	46,	45,	66,	135,	145,	143,	147,	142,	136,	153,	142,	152,	151,	151,	149,	146,	144,	144,	148,	145,	143,	145,	144,	145,	149,	144,	144,	145,	139,	145,	145,	141,	147,	141,
    180,	185,	185,	183,	186,	184,	189,	189,	192,	194,	192,	195,	199,	199,	201,	203,	206,	203,	206,	204,	207,	208,	208,	208,	208,	209,	210,	210,	212,	212,	213,	213,	217,	218,	219,	218,	216,	212,	204,	160,	69,	54,	53,	50,	46,	46,	50,	45,	47,	71,	147,	146,	143,	142,	147,	138,	155,	146,	145,	149,	146,	149,	149,	149,	147,	151,	147,	148,	146,	146,	148,	149,	145,	146,	143,	143,	146,	141,	143,	139,	141,
    178,	182,	184,	184,	186,	186,	185,	190,	196,	190,	195,	196,	199,	203,	200,	200,	203,	205,	207,	206,	208,	207,	208,	209,	207,	211,	213,	213,	213,	219,	215,	213,	215,	217,	220,	217,	218,	215,	211,	183,	93,	44,	42,	41,	46,	48,	47,	43,	51,	81,	142,	145,	138,	144,	147,	137,	151,	149,	141,	150,	147,	149,	144,	144,	147,	144,	148,	144,	147,	141,	144,	144,	142,	146,	140,	141,	146,	143,	144,	136,	138,
    179,	183,	183,	185,	184,	182,	189,	189,	193,	193,	191,	195,	197,	199,	202,	200,	202,	205,	205,	206,	210,	208,	207,	206,	209,	212,	212,	210,	214,	213,	213,	214,	213,	216,	216,	220,	219,	215,	211,	198,	123,	49,	42,	37,	40,	44,	43,	41,	52,	92,	141,	142,	138,	143,	146,	135,	149,	156,	147,	150,	150,	148,	144,	146,	147,	146,	144,	146,	143,	143,	139,	150,	143,	147,	147,	144,	141,	146,	144,	139,	139,
    181,	180,	185,	183,	185,	184,	186,	190,	189,	193,	190,	196,	198,	199,	203,	202,	202,	203,	206,	205,	207,	205,	208,	207,	212,	210,	211,	211,	214,	213,	214,	213,	213,	217,	220,	218,	219,	217,	213,	204,	153,	64,	38,	39,	39,	45,	44,	40,	56,	104,	144,	139,	143,	140,	154,	141,	148,	159,	151,	148,	146,	151,	150,	149,	144,	143,	149,	143,	149,	145,	147,	145,	150,	141,	146,	140,	143,	138,	144,	140,	141,
    179,	181,	181,	185,	187,	185,	187,	187,	189,	189,	190,	193,	194,	198,	201,	200,	201,	207,	205,	205,	203,	210,	205,	208,	207,	210,	212,	209,	214,	213,	213,	213,	215,	215,	217,	218,	218,	220,	214,	210,	184,	87,	45,	48,	43,	43,	42,	45,	57,	105,	142,	138,	140,	139,	147,	142,	145,	158,	149,	144,	142,	152,	150,	143,	147,	144,	146,	139,	143,	143,	146,	145,	146,	146,	145,	144,	141,	147,	143,	139,	144,
    180,	180,	181,	182,	184,	187,	186,	189,	191,	193,	193,	195,	196,	199,	198,	198,	199,	205,	206,	207,	201,	205,	206,	207,	207,	209,	210,	209,	213,	213,	212,	213,	216,	215,	216,	218,	218,	217,	215,	209,	196,	121,	45,	42,	44,	41,	47,	43,	62,	113,	139,	138,	139,	140,	149,	141,	145,	157,	156,	150,	142,	149,	148,	145,	146,	144,	146,	144,	145,	143,	142,	147,	139,	142,	146,	140,	140,	142,	139,	138,	140,
    179,	180,	181,	183,	183,	185,	188,	188,	189,	194,	194,	195,	197,	199,	197,	201,	200,	204,	205,	207,	204,	204,	205,	206,	208,	206,	211,	208,	210,	210,	212,	213,	215,	213,	214,	217,	217,	218,	215,	210,	205,	156,	55,	40,	42,	45,	42,	48,	63,	125,	142,	135,	138,	137,	151,	146,	142,	156,	156,	146,	143,	142,	146,	147,	142,	144,	145,	143,	145,	144,	145,	145,	140,	145,	143,	136,	141,	140,	143,	140,	145,
    176,	179,	179,	186,	186,	188,	188,	186,	188,	193,	191,	194,	197,	196,	198,	200,	203,	207,	202,	205,	203,	206,	207,	206,	208,	209,	210,	208,	212,	211,	210,	212,	212,	212,	216,	215,	217,	216,	216,	211,	206,	176,	77,	37,	40,	42,	44,	51,	71,	131,	140,	131,	140,	139,	146,	145,	143,	150,	155,	147,	147,	147,	142,	146,	145,	148,	145,	145,	144,	144,	147,	148,	142,	143,	140,	140,	144,	138,	144,	137,	140,
    178,	179,	182,	185,	183,	187,	189,	187,	190,	191,	188,	194,	196,	195,	196,	198,	202,	204,	205,	206,	201,	204,	206,	206,	207,	209,	209,	211,	213,	210,	210,	212,	212,	212,	214,	216,	217,	215,	216,	215,	209,	196,	112,	39,	40,	42,	44,	44,	71,	129,	137,	132,	143,	135,	148,	148,	147,	146,	153,	153,	145,	146,	145,	147,	144,	147,	143,	143,	144,	144,	142,	142,	142,	137,	141,	147,	140,	141,	139,	138,	138,
    179,	177,	186,	183,	186,	187,	193,	187,	186,	190,	192,	194,	196,	196,	199,	197,	202,	203,	204,	203,	203,	205,	204,	206,	207,	208,	210,	209,	211,	210,	209,	211,	215,	213,	212,	215,	217,	217,	215,	218,	212,	203,	138,	45,	42,	42,	42,	45,	79,	134,	138,	138,	138,	139,	148,	146,	145,	149,	153,	158,	142,	145,	140,	147,	140,	146,	143,	147,	142,	143,	138,	146,	138,	143,	138,	144,	139,	137,	144,	139,	140,
    179,	179,	182,	183,	182,	186,	188,	187,	187,	190,	189,	195,	194,	197,	198,	198,	199,	203,	204,	202,	204,	205,	206,	208,	208,	207,	208,	208,	210,	210,	210,	212,	215,	214,	212,	214,	215,	215,	217,	217,	213,	203,	168,	72,	37,	40,	44,	45,	86,	129,	137,	142,	139,	139,	148,	144,	146,	151,	152,	155,	146,	145,	142,	141,	141,	145,	142,	142,	145,	141,	144,	143,	144,	137,	139,	149,	136,	143,	136,	139,	139,
    176,	181,	182,	181,	181,	186,	187,	185,	188,	190,	190,	195,	195,	199,	198,	199,	202,	205,	201,	203,	204,	204,	204,	206,	207,	208,	208,	213,	209,	210,	211,	212,	214,	212,	214,	215,	215,	216,	216,	215,	212,	208,	184,	94,	39,	39,	46,	46,	99,	129,	133,	136,	139,	140,	151,	140,	146,	151,	145,	156,	152,	145,	143,	145,	142,	144,	141,	143,	145,	134,	141,	141,	140,	145,	140,	141,	139,	139,	138,	140,	142,
    177,	180,	180,	179,	182,	186,	187,	186,	186,	191,	189,	193,	194,	195,	199,	198,	200,	200,	200,	204,	204,	202,	205,	205,	205,	207,	207,	209,	209,	212,	209,	210,	213,	212,	214,	214,	215,	216,	214,	214,	213,	207,	196,	126,	46,	46,	44,	48,	102,	132,	130,	142,	136,	140,	152,	142,	145,	149,	147,	151,	160,	146,	146,	144,	142,	141,	142,	143,	145,	141,	146,	141,	148,	139,	144,	139,	139,	142,	137,	142,	143,
    173,	178,	179,	184,	181,	184,	182,	186,	188,	186,	192,	195,	194,	194,	195,	197,	196,	200,	203,	202,	203,	201,	204,	205,	205,	207,	206,	207,	209,	209,	212,	212,	213,	212,	212,	212,	213,	215,	214,	215,	213,	208,	204,	153,	52,	43,	47,	50,	116,	130,	135,	143,	141,	139,	149,	140,	147,	146,	142,	142,	158,	146,	146,	149,	145,	143,	145,	144,	141,	145,	143,	143,	143,	138,	140,	143,	140,	139,	137,	139,	141,
    174,	179,	175,	177,	181,	183,	183,	185,	190,	188,	192,	191,	192,	195,	195,	195,	200,	199,	203,	203,	202,	205,	204,	205,	208,	207,	205,	208,	209,	210,	209,	209,	211,	212,	212,	213,	212,	214,	213,	214,	214,	211,	206,	179,	81,	41,	47,	57,	125,	131,	134,	142,	140,	142,	151,	141,	145,	145,	146,	144,	152,	152,	141,	144,	141,	145,	140,	143,	146,	140,	147,	145,	140,	136,	139,	141,	139,	139,	142,	137,	143,
    173,	174,	176,	178,	176,	183,	186,	186,	191,	190,	192,	189,	193,	195,	195,	197,	197,	201,	200,	204,	204,	205,	207,	206,	204,	205,	207,	208,	209,	210,	210,	212,	213,	212,	212,	213,	212,	215,	213,	213,	212,	210,	206,	190,	102,	40,	42,	63,	121,	132,	133,	141,	139,	137,	147,	141,	145,	147,	147,	146,	149,	159,	143,	144,	142,	147,	144,	144,	145,	145,	143,	140,	141,	143,	137,	139,	138,	140,	138,	139,	138,
    174,	173,	173,	179,	180,	180,	185,	185,	188,	189,	188,	187,	191,	195,	193,	194,	197,	199,	201,	204,	204,	206,	205,	207,	205,	205,	209,	207,	209,	207,	210,	211,	212,	211,	210,	212,	213,	212,	212,	213,	213,	212,	209,	200,	135,	46,	44,	62,	128,	131,	128,	144,	139,	139,	150,	143,	151,	149,	148,	148,	145,	157,	146,	143,	144,	143,	145,	142,	150,	143,	148,	140,	142,	141,	139,	138,	142,	138,	141,	139,	137,
    169,	172,	174,	180,	180,	182,	183,	182,	189,	187,	188,	187,	197,	196,	194,	196,	198,	199,	198,	202,	201,	206,	208,	204,	206,	206,	205,	205,	207,	208,	211,	212,	208,	212,	210,	213,	212,	212,	212,	213,	217,	213,	208,	203,	160,	53,	44,	70,	131,	122,	131,	146,	142,	141,	152,	143,	148,	148,	148,	148,	145,	148,	145,	144,	141,	148,	143,	144,	140,	143,	146,	148,	143,	139,	136,	140,	141,	143,	141,	142,	138,
    171,	173,	174,	177,	178,	180,	181,	181,	183,	186,	190,	188,	194,	192,	194,	197,	197,	197,	199,	199,	198,	202,	207,	205,	204,	205,	205,	204,	208,	209,	208,	209,	211,	213,	212,	212,	212,	212,	212,	212,	215,	210,	211,	205,	180,	80,	45,	72,	128,	124,	136,	144,	144,	146,	151,	144,	149,	155,	148,	149,	146,	144,	143,	148,	140,	143,	145,	142,	145,	141,	148,	148,	147,	140,	139,	145,	141,	143,	143,	141,	139,
    170,	175,	174,	178,	181,	180,	182,	181,	184,	188,	191,	191,	193,	191,	197,	198,	195,	200,	199,	199,	200,	202,	205,	202,	203,	204,	206,	206,	205,	209,	207,	209,	214,	209,	212,	215,	212,	212,	214,	213,	213,	212,	210,	205,	192,	112,	47,	78,	124,	126,	138,	141,	143,	146,	149,	136,	156,	146,	153,	147,	147,	147,	148,	149,	142,	143,	141,	144,	145,	143,	143,	142,	147,	141,	143,	142,	142,	143,	144,	139,	145,
    171,	172,	175,	178,	179,	177,	183,	180,	185,	188,	189,	191,	192,	191,	193,	197,	194,	199,	198,	197,	199,	201,	203,	203,	204,	204,	205,	202,	205,	212,	207,	209,	210,	211,	212,	213,	210,	213,	211,	215,	212,	211,	211,	206,	202,	152,	57,	87,	123,	123,	142,	145,	140,	141,	149,	140,	147,	149,	146,	150,	144,	143,	147,	142,	141,	142,	146,	142,	143,	142,	143,	139,	146,	141,	145,	145,	145,	145,	141,	141,	144,
    169,	171,	168,	174,	179,	176,	182,	182,	183,	184,	186,	190,	192,	190,	191,	198,	196,	199,	197,	197,	201,	200,	201,	203,	206,	206,	206,	204,	207,	208,	206,	208,	209,	209,	211,	210,	210,	210,	212,	210,	209,	212,	213,	206,	204,	177,	82,	92,	124,	131,	142,	141,	141,	144,	141,	132,	140,	150,	147,	146,	149,	145,	142,	144,	146,	145,	146,	144,	149,	145,	147,	141,	146,	147,	148,	146,	144,	144,	141,	145,	140,
    170,	170,	169,	172,	177,	175,	181,	182,	183,	182,	183,	190,	190,	190,	191,	193,	198,	195,	199,	197,	199,	201,	203,	203,	206,	207,	204,	203,	205,	208,	208,	209,	210,	210,	211,	211,	211,	210,	211,	212,	212,	211,	211,	209,	206,	196,	112,	99,	122,	133,	142,	143,	138,	143,	134,	127,	133,	140,	140,	141,	145,	145,	144,	142,	145,	148,	142,	145,	146,	148,	143,	145,	148,	144,	148,	146,	144,	143,	143,	145,	141,
    171,	169,	172,	172,	175,	173,	179,	182,	183,	182,	185,	187,	193,	189,	189,	195,	194,	194,	197,	199,	197,	198,	204,	204,	204,	206,	205,	206,	208,	210,	208,	208,	212,	209,	210,	212,	209,	209,	211,	212,	213,	211,	211,	210,	204,	200,	143,	108,	123,	136,	146,	144,	140,	136,	130,	118,	125,	133,	134,	135,	134,	135,	137,	137,	146,	144,	141,	142,	149,	144,	149,	148,	146,	146,	144,	146,	148,	143,	145,	143,	143,
    170,	170,	172,	176,	172,	176,	181,	180,	180,	182,	186,	187,	190,	191,	192,	193,	196,	194,	199,	198,	200,	199,	201,	203,	204,	205,	205,	206,	207,	208,	209,	212,	212,	210,	212,	209,	210,	209,	210,	211,	212,	213,	213,	211,	209,	202,	175,	115,	122,	135,	144,	140,	143,	137,	120,	116,	120,	123,	127,	132,	129,	132,	132,	133,	142,	134,	139,	143,	140,	141,	145,	147,	144,	148,	144,	147,	148,	143,	148,	144,	141,
    171,	172,	174,	172,	172,	179,	177,	179,	181,	178,	185,	188,	189,	192,	193,	193,	193,	196,	194,	195,	199,	201,	200,	201,	204,	207,	207,	208,	208,	210,	209,	211,	211,	209,	209,	210,	213,	212,	208,	209,	213,	212,	210,	211,	212,	207,	191,	131,	124,	143,	143,	141,	129,	131,	109,	111,	111,	118,	125,	116,	123,	122,	127,	126,	128,	133,	133,	127,	136,	137,	146,	142,	145,	143,	146,	147,	147,	150,	144,	142,	144,
    170,	170,	171,	171,	173,	174,	175,	179,	178,	183,	176,	185,	186,	190,	191,	189,	195,	193,	194,	196,	200,	199,	200,	202,	202,	205,	207,	208,	208,	209,	207,	209,	210,	210,	209,	211,	211,	212,	210,	211,	213,	213,	210,	212,	212,	211,	201,	156,	124,	141,	146,	135,	123,	119,	101,	103,	107,	111,	118,	108,	116,	114,	121,	119,	121,	129,	132,	129,	132,	136,	135,	140,	141,	144,	144,	144,	146,	146,	144,	146,	148,
    167,	169,	171,	172,	174,	176,	176,	178,	179,	182,	180,	186,	189,	189,	191,	189,	196,	195,	194,	194,	198,	199,	199,	203,	203,	203,	205,	209,	207,	210,	208,	209,	209,	211,	207,	210,	213,	213,	211,	213,	212,	212,	210,	211,	212,	213,	207,	174,	129,	137,	142,	131,	121,	112,	98,	94,	94,	100,	115,	97,	107,	110,	113,	110,	116,	120,	122,	119,	126,	129,	131,	135,	130,	135,	142,	136,	146,	141,	140,	146,	150,
    166,	171,	170,	170,	172,	178,	173,	174,	179,	179,	182,	187,	186,	187,	188,	192,	193,	193,	195,	198,	198,	200,	201,	201,	204,	202,	206,	206,	205,	207,	211,	209,	209,	212,	209,	211,	209,	213,	211,	210,	210,	212,	210,	212,	214,	212,	207,	191,	142,	135,	135,	115,	109,	109,	91,	87,	90,	101,	108,	95,	97,	96,	102,	105,	110,	107,	114,	112,	123,	122,	127,	128,	130,	129,	131,	131,	136,	141,	143,	138,	141,
    169,	170,	166,	169,	172,	172,	169,	176,	181,	182,	183,	186,	185,	186,	192,	188,	190,	190,	196,	195,	197,	200,	201,	201,	201,	199,	208,	205,	208,	212,	210,	208,	207,	211,	211,	209,	210,	212,	210,	211,	212,	210,	213,	213,	214,	213,	211,	200,	155,	132,	129,	107,	96,	96,	85,	81,	86,	92,	108,	88,	86,	92,	97,	99,	99,	103,	103,	112,	115,	115,	123,	119,	122,	122,	129,	129,	130,	137,	137,	132,	135,
    164,	168,	169,	170,	168,	169,	170,	176,	178,	179,	178,	184,	185,	186,	188,	189,	189,	194,	193,	194,	192,	197,	201,	201,	204,	203,	206,	206,	207,	210,	207,	208,	209,	213,	214,	212,	212,	217,	211,	213,	215,	214,	214,	213,	214,	215,	212,	208,	173,	128,	120,	92,	89,	86,	85,	78,	86,	85,	101,	82,	83,	86,	94,	91,	92,	100,	100,	103,	105,	107,	107,	110,	112,	116,	116,	117,	126,	122,	123,	124,	128,
    165,	169,	171,	168,	169,	169,	169,	172,	173,	178,	177,	183,	186,	187,	185,	189,	191,	190,	190,	192,	194,	198,	202,	203,	204,	204,	207,	207,	206,	208,	206,	210,	210,	211,	210,	210,	210,	215,	211,	212,	213,	214,	213,	214,	216,	216,	212,	212,	184,	128,	104,	89,	89,	87,	84,	69,	72,	80,	84,	76,	75,	86,	86,	86,	89,	96,	94,	99,	96,	91,	102,	102,	106,	104,	108,	114,	114,	119,	121,	122,	116,
    166,	169,	165,	168,	168,	172,	169,	172,	173,	180,	178,	184,	186,	184,	188,	189,	188,	191,	192,	192,	195,	197,	200,	202,	201,	203,	205,	207,	205,	209,	206,	209,	210,	211,	211,	209,	210,	212,	211,	211,	214,	214,	214,	214,	215,	216,	214,	210,	198,	133,	96,	82,	82,	84,	86,	84,	82,	93,	83,	75,	75,	78,	83,	84,	82,	86,	86,	98,	86,	91,	95,	95,	106,	101,	99,	104,	102,	112,	109,	110,	107,
    164,	168,	168,	166,	168,	168,	172,	174,	175,	175,	177,	182,	188,	185,	180,	186,	188,	189,	191,	194,	194,	196,	201,	201,	203,	205,	203,	207,	205,	206,	205,	208,	207,	209,	213,	210,	211,	209,	213,	211,	212,	214,	214,	214,	215,	216,	215,	214,	203,	147,	94,	77,	86,	90,	91,	76,	97,	102,	85,	79,	83,	78,	78,	76,	76,	80,	82,	88,	85,	86,	87,	90,	94,	98,	91,	95,	97,	99,	99,	102,	103,
    170,	170,	166,	168,	173,	171,	173,	171,	171,	176,	178,	182,	183,	184,	183,	187,	190,	189,	191,	195,	195,	198,	198,	201,	199,	203,	204,	205,	207,	207,	208,	208,	211,	209,	210,	211,	211,	212,	211,	213,	212,	213,	215,	214,	216,	216,	215,	213,	210,	167,	101,	81,	89,	90,	94,	79,	94,	101,	91,	81,	89,	88,	89,	86,	84,	87,	80,	87,	83,	81,	84,	88,	88,	91,	89,	90,	89,	88,	85,	93,	91,
    166,	167,	166,	169,	169,	169,	170,	170,	172,	178,	178,	180,	183,	181,	186,	186,	188,	187,	195,	194,	197,	199,	200,	199,	199,	202,	204,	206,	205,	205,	207,	207,	208,	209,	209,	210,	212,	213,	212,	212,	213,	213,	215,	215,	217,	214,	213,	214,	210,	185,	103,	78,	90,	89,	97,	91,	94,	101,	90,	90,	90,	91,	89,	85,	89,	90,	82,	87,	92,	83,	83,	81,	82,	77,	83,	79,	79,	85,	82,	85,	86,
    163,	168,	167,	167,	169,	166,	170,	167,	171,	176,	176,	177,	184,	180,	183,	187,	189,	189,	192,	193,	196,	198,	199,	200,	201,	200,	203,	205,	205,	207,	206,	208,	209,	209,	212,	210,	210,	210,	211,	213,	212,	213,	215,	214,	217,	213,	215,	213,	209,	197,	125,	87,	82,	91,	93,	87,	104,	100,	92,	96,	102,	95,	90,	94,	89,	89,	86,	93,	83,	86,	76,	79,	74,	80,	79,	83,	73,	73,	77,	78,	81,
    160,	165,	165,	164,	167,	167,	167,	169,	172,	174,	174,	175,	182,	182,	183,	185,	188,	190,	192,	193,	196,	195,	196,	199,	198,	201,	203,	204,	207,	205,	205,	206,	208,	205,	208,	208,	209,	211,	209,	212,	211,	211,	213,	213,	217,	214,	214,	215,	210,	204,	148,	83,	80,	86,	95,	89,	105,	98,	101,	101,	104,	98,	98,	91,	90,	95,	88,	101,	89,	88,	85,	85,	79,	83,	75,	69,	71,	75,	76,	72,	77,
    162,	165,	164,	167,	168,	165,	171,	169,	175,	175,	176,	177,	180,	180,	189,	183,	187,	184,	190,	192,	191,	197,	199,	198,	196,	199,	201,	207,	205,	207,	203,	208,	208,	208,	206,	211,	208,	212,	212,	211,	212,	212,	213,	214,	214,	217,	214,	215,	213,	207,	175,	96,	78,	86,	96,	96,	105,	98,	103,	102,	101,	101,	94,	98,	100,	101,	93,	93,	88,	93,	84,	91,	85,	85,	77,	82,	77,	73,	74,	73,	69,
    163,	162,	165,	167,	168,	168,	168,	169,	177,	176,	176,	176,	178,	180,	185,	185,	183,	186,	187,	189,	195,	197,	197,	199,	200,	198,	203,	201,	205,	203,	202,	207,	206,	207,	209,	208,	209,	210,	211,	211,	211,	213,	213,	216,	215,	216,	216,	214,	214,	210,	188,	113,	84,	88,	96,	96,	101,	98,	111,	104,	105,	104,	100,	101,	102,	101,	101,	98,	98,	96,	90,	95,	94,	86,	82,	81,	81,	74,	74,	72,	63,
    160,	163,	162,	162,	163,	167,	168,	169,	171,	176,	174,	173,	176,	182,	181,	182,	182,	185,	186,	188,	193,	192,	196,	194,	197,	197,	201,	201,	203,	203,	204,	204,	207,	207,	206,	208,	208,	211,	210,	211,	211,	211,	212,	214,	215,	214,	215,	212,	212,	209,	201,	140,	86,	88,	92,	99,	101,	100,	106,	108,	106,	106,	106,	110,	100,	98,	102,	98,	96,	98,	95,	96,	91,	88,	86,	84,	79,	77,	73,	73,	69,
    159,	162,	164,	168,	162,	166,	167,	167,	174,	178,	173,	174,	176,	176,	177,	180,	180,	182,	186,	191,	192,	195,	195,	193,	196,	198,	203,	202,	203,	203,	205,	204,	206,	208,	207,	205,	208,	211,	212,	211,	212,	212,	212,	214,	216,	214,	213,	213,	212,	210,	207,	168,	96,	86,	92,	97,	103,	100,	107,	114,	111,	111,	107,	108,	104,	107,	107,	103,	99,	100,	95,	99,	94,	87,	87,	85,	81,	82,	81,	82,	73,
    159,	162,	163,	163,	162,	167,	166,	170,	174,	177,	172,	175,	176,	180,	182,	182,	182,	186,	188,	191,	191,	191,	195,	194,	195,	196,	197,	201,	200,	203,	204,	205,	206,	208,	208,	205,	209,	210,	210,	213,	211,	211,	212,	213,	214,	214,	213,	214,	211,	211,	206,	185,	109,	87,	92,	98,	100,	104,	105,	111,	112,	106,	108,	105,	107,	109,	108,	107,	108,	101,	102,	97,	96,	94,	93,	88,	89,	88,	79,	83,	77,
    157,	157,	161,	162,	166,	166,	168,	170,	173,	177,	175,	171,	175,	178,	181,	181,	185,	186,	188,	191,	190,	193,	194,	198,	196,	194,	199,	199,	204,	203,	204,	207,	204,	207,	206,	206,	208,	209,	207,	210,	209,	212,	211,	212,	214,	214,	212,	215,	211,	212,	208,	199,	133,	91,	93,	96,	99,	102,	106,	111,	111,	108,	112,	115,	108,	108,	108,	108,	101,	107,	104,	96,	103,	100,	95,	94,	92,	90,	82,	88,	82,
    157,	158,	163,	162,	164,	164,	166,	168,	173,	169,	170,	171,	177,	175,	183,	176,	181,	182,	185,	190,	192,	194,	195,	193,	195,	194,	201,	198,	201,	200,	205,	206,	204,	206,	208,	209,	209,	208,	206,	211,	210,	211,	212,	213,	213,	214,	212,	214,	214,	214,	210,	203,	154,	95,	93,	93,	98,	100,	106,	105,	108,	115,	111,	110,	112,	112,	110,	115,	106,	105,	105,	102,	105,	104,	97,	92,	94,	93,	88,	87,	87,
    158,	161,	161,	165,	160,	163,	169,	169,	167,	168,	171,	170,	173,	178,	180,	175,	178,	183,	186,	189,	190,	190,	194,	196,	197,	197,	198,	196,	199,	201,	204,	202,	202,	205,	206,	208,	209,	210,	206,	206,	210,	210,	211,	212,	214,	212,	213,	214,	214,	213,	213,	207,	177,	107,	88,	90,	101,	99,	107,	103,	106,	112,	111,	113,	110,	115,	110,	113,	106,	109,	107,	103,	101,	101,	104,	97,	96,	100,	93,	94,	84,
    161,	160,	161,	160,	159,	166,	171,	170,	167,	167,	169,	170,	172,	176,	177,	177,	181,	186,	187,	186,	189,	190,	192,	193,	196,	196,	199,	197,	200,	201,	204,	204,	203,	207,	204,	205,	206,	208,	206,	208,	209,	211,	211,	211,	211,	214,	212,	214,	214,	214,	212,	211,	195,	121,	87,	91,	93,	94,	104,	109,	109,	113,	113,	107,	111,	112,	112,	111,	106,	108,	108,	108,	99,	103,	100,	91,	96,	98,	92,	92,	86,
    160,	162,	159,	159,	164,	164,	167,	167,	168,	166,	168,	168,	174,	173,	172,	175,	179,	184,	187,	190,	187,	195,	190,	195,	199,	195,	194,	199,	201,	201,	203,	203,	207,	205,	205,	204,	206,	208,	208,	210,	210,	210,	211,	213,	211,	211,	213,	213,	212,	213,	210,	207,	198,	142,	85,	90,	92,	94,	106,	103,	109,	111,	113,	109,	113,	113,	112,	112,	109,	109,	104,	106,	99,	111,	99,	93,	96,	99,	98,	93,	95,
    158,	162,	162,	161,	159,	164,	163,	161,	162,	166,	166,	168,	169,	175,	174,	176,	183,	181,	179,	187,	185,	189,	192,	193,	191,	195,	194,	197,	200,	200,	202,	202,	205,	206,	206,	209,	206,	207,	208,	208,	211,	212,	211,	214,	211,	210,	208,	211,	213,	212,	213,	210,	204,	162,	105,	82,	87,	95,	100,	100,	108,	110,	108,	115,	110,	111,	113,	113,	115,	110,	111,	108,	103,	104,	97,	106,	97,	101,	95,	93,	86,
    161,	160,	160,	160,	163,	165,	163,	159,	163,	164,	166,	171,	174,	177,	171,	175,	183,	181,	183,	183,	183,	188,	191,	189,	190,	193,	195,	197,	201,	200,	203,	203,	204,	205,	206,	208,	205,	208,	207,	208,	207,	212,	210,	211,	212,	208,	205,	210,	212,	215,	214,	211,	206,	183,	111,	85,	88,	94,	101,	101,	109,	112,	114,	109,	113,	114,	111,	114,	109,	106,	108,	102,	112,	103,	101,	103,	101,	99,	100,	95,	89,
    153,	161,	163,	158,	168,	164,	167,	163,	162,	165,	166,	168,	172,	179,	172,	174,	176,	176,	180,	180,	184,	190,	189,	190,	195,	191,	195,	197,	198,	200,	201,	203,	205,	206,	206,	205,	205,	208,	209,	209,	211,	212,	210,	209,	212,	210,	206,	210,	213,	212,	212,	214,	205,	197,	141,	86,	87,	91,	95,	95,	98,	105,	108,	109,	114,	117,	116,	112,	113,	110,	108,	106,	107,	102,	101,	103,	101,	99,	101,	94,	93,
    158,	157,	161,	165,	160,	165,	167,	159,	162,	164,	165,	169,	170,	175,	172,	171,	175,	177,	176,	181,	183,	186,	189,	190,	190,	191,	194,	194,	195,	199,	200,	200,	201,	204,	204,	204,	206,	207,	207,	210,	211,	209,	209,	212,	212,	210,	208,	211,	213,	211,	213,	212,	209,	202,	159,	103,	88,	91,	90,	97,	103,	97,	108,	106,	109,	112,	113,	114,	109,	108,	110,	107,	112,	99,	98,	102,	106,	99,	104,	100,	97,
    154,	158,	163,	161,	163,	162,	164,	162,	165,	168,	165,	171,	168,	169,	167,	170,	172,	173,	176,	182,	181,	182,	187,	188,	191,	191,	194,	193,	194,	199,	199,	199,	202,	202,	204,	205,	206,	208,	207,	209,	207,	211,	208,	211,	210,	210,	208,	211,	213,	211,	216,	211,	211,	206,	179,	111,	84,	90,	93,	99,	98,	100,	108,	103,	107,	112,	110,	111,	107,	109,	114,	108,	105,	100,	104,	97,	107,	105,	103,	98,	98,
    152,	159,	160,	160,	160,	163,	160,	165,	165,	164,	169,	168,	165,	166,	170,	169,	173,	175,	178,	178,	182,	182,	188,	188,	190,	188,	190,	194,	196,	196,	196,	200,	200,	202,	204,	205,	207,	205,	208,	209,	208,	209,	209,	211,	210,	210,	209,	209,	214,	215,	211,	213,	212,	207,	194,	128,	86,	85,	94,	95,	103,	108,	101,	105,	103,	110,	109,	111,	107,	107,	107,	114,	104,	109,	102,	98,	98,	104,	110,	103,	102,
    154,	164,	164,	159,	159,	162,	161,	162,	165,	165,	171,	167,	166,	169,	167,	170,	174,	173,	177,	179,	181,	183,	183,	187,	188,	189,	191,	194,	196,	196,	198,	200,	200,	200,	204,	203,	202,	203,	207,	209,	210,	210,	210,	210,	212,	210,	212,	211,	212,	217,	214,	211,	212,	207,	200,	146,	88,	91,	86,	97,	96,	100,	99,	107,	108,	103,	113,	111,	106,	106,	107,	111,	108,	104,	104,	105,	103,	107,	106,	100,	106,
    153,	155,	158,	160,	160,	159,	161,	163,	163,	166,	167,	166,	166,	170,	170,	169,	178,	174,	171,	178,	182,	182,	183,	183,	190,	188,	187,	191,	191,	194,	195,	197,	202,	199,	204,	203,	204,	203,	207,	209,	210,	210,	210,	210,	213,	210,	209,	211,	211,	216,	211,	213,	212,	206,	202,	164,	98,	84,	88,	92,	103,	101,	103,	106,	106,	104,	106,	107,	103,	108,	108,	115,	114,	102,	110,	101,	100,	102,	104,	100,	105};

    numRows = 68;
    numCols = 81;
    return img;
}


inline int* getSimpleImage(int& numRows, int& numCols){
    
    int* img=new int[255]{
        122, 127, 166, 201, 152,  96,  54,  44,  40,  41,  42,  43,  44,
        44,  37, 133, 143, 213, 246, 236, 196, 137,  85,  55,  43,  44,
        45,  35,  40,  42, 133, 168, 231, 242, 246, 246, 228, 172, 111,
        74,  76,  80,  54,  52,  41, 147, 215, 222, 199, 220, 235, 244,
       237, 205, 172, 181, 186, 106,  57,  47, 164, 235, 224, 149, 168,
       208, 231, 244, 248, 246, 246, 230, 133,  58,  62, 140, 224, 237,
       161, 128, 149, 180, 227, 245, 248, 247, 243, 189, 103,  94, 134,
       211, 240, 181, 109, 105, 120, 168, 223, 240, 241, 246, 237, 176,
       110, 117, 188, 244, 210, 111,  74,  86, 144, 215, 230, 219, 227,
       232, 212, 133,  66, 159, 242, 238, 149,  75,  78, 163, 238, 212,
       172, 198, 219, 175, 111,  75, 144, 231, 244, 171,  81, 113, 212,
       222, 149, 108, 115, 137, 118,  99,  78, 139, 222, 245, 185, 115,
       176, 229, 176,  85,  62,  79,  95,  98, 107,  48, 102, 199, 241,
       220, 171, 220, 208, 125,  47,  45,  73,  90,  98, 104,  41,  72,
       171, 240, 242, 233, 226, 149,  65,  39,  60,  97, 104, 106, 112,
        54,  68, 140, 228, 238, 236, 194, 100,  44,  48,  85, 100, 104,
       107, 122,  54,  54,  94, 181, 222, 214, 141,  67,  40,  72,  99,
       105, 106, 109, 123,  54,  48,  59,  95, 145, 158,  84,  52,  60,
        96, 110, 115, 116, 110, 113,  49,  45,  44,  48,  71,  89,  49,
        47,  71,  95, 162, 156, 119, 122, 111};

    numRows=17;
    numCols=15;
    return img;
}


#endif // TESTS_HPP